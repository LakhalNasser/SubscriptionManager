# main.py

import socket
import os
import sys
import time
import subprocess
from PyQt5.QtWidgets import *
from PyQt5.QtCore import *
from config import Config
from threads import ScrcpyThread
from ui_components import DisplaySettings, AudioSettings, ControlSettings, InputSettings, WirelessSettings

class ScrcpyManager(QMainWindow):
    def __init__(self):
        super().__init__()
        self.settings = QSettings('ScrcpyManager', 'Settings')
        self.wireless_settings = WirelessSettings()
        self.scrcpy_processes = []
        self.init_ui()
        self.setup_connections()
        self.load_settings()
        self.refresh_devices()
        self.refresh_ip_addresses()

    def init_ui(self):
        self.setWindowTitle(Config.APP_NAME)
        self.setGeometry(*Config.DEFAULT_WINDOW_POS, *Config.DEFAULT_WINDOW_SIZE)
        
        central_widget = QWidget()
        self.setCentralWidget(central_widget)
        layout = QVBoxLayout()
        
        # Create tabs
        tabs = QTabWidget()
        
        # Main Control Tab
        control_tab = QWidget()
        control_layout = QVBoxLayout()
        
        control_layout.addWidget(self.wireless_settings)
        
        # Device List
        self.device_list = QListWidget()
        control_layout.addWidget(QLabel('الأجهزة المتصلة:'))
        control_layout.addWidget(self.device_list)
       
        
        # Control Buttons
        buttons_layout = QHBoxLayout()
        self.start_button = QPushButton('تشغيل')
        self.stop_button = QPushButton('إيقاف')
        self.toggle_conn_button = QPushButton('تبديل الاتصال')
        self.refresh_button = QPushButton('تحديث الأجهزة')
        self.refresh_button.setToolTip('تحديث قائمة الأجهزة المتصلة')

        buttons_layout.addWidget(self.refresh_button)
        buttons_layout.addWidget(self.start_button)
        buttons_layout.addWidget(self.stop_button)
        buttons_layout.addWidget(self.toggle_conn_button)
        
        control_layout.addLayout(buttons_layout)
        control_tab.setLayout(control_layout)

        
        # Settings Tab
        settings_tab = QWidget()
        settings_layout = QVBoxLayout()
        
        self.display_settings = DisplaySettings()
        self.audio_settings = AudioSettings()
        self.control_settings = ControlSettings()
        self.input_settings = InputSettings()

        settings_layout.addWidget(self.input_settings)        
        settings_layout.addWidget(self.display_settings)
        settings_layout.addWidget(self.audio_settings)
        settings_layout.addWidget(self.control_settings)
        
        settings_tab.setLayout(settings_layout)
        
        # Error Log Tab
        log_tab = QWidget()
        log_layout = QVBoxLayout()
        self.error_log = QTextEdit()
        self.error_log.setReadOnly(True)
        log_layout.addWidget(self.error_log)
        log_tab.setLayout(log_layout)
        
        # Add tabs
        tabs.addTab(control_tab, "التحكم")
        tabs.addTab(settings_tab, "الإعدادات")
        tabs.addTab(log_tab, "سجل الأخطاء")
        
        layout.addWidget(tabs)
        central_widget.setLayout(layout)
        
    def setup_connections(self):
        self.start_button.clicked.connect(self.start_scrcpy)
        self.stop_button.clicked.connect(self.stop_scrcpy)
        self.toggle_conn_button.clicked.connect(self.toggle_connection)
        self.refresh_button.clicked.connect(self.refresh_devices)
        self.wireless_settings.refresh_ip_button.clicked.connect(self.refresh_ip_addresses)
        self.wireless_settings.connect_wireless_button.clicked.connect(self.connect_wireless)
        self.wireless_settings.disconnect_wireless_button.clicked.connect(self.disconnect_wireless)
        self.device_list.itemSelectionChanged.connect(self.on_device_selection_changed)

    def on_device_selection_changed(self):
        """عند تغيير اختيار الجهاز"""
        selected_items = self.device_list.selectedItems()
        if selected_items:
            device_id = selected_items[0].text()
            if ':' not in device_id:  # إذا كان متصلاً بالكابل
                self.refresh_ip_addresses()

    def get_local_ip_addresses(self):
        """الحصول على قائمة عناوين IP المحلية"""
        ip_addresses = []
        try:
            # الحصول على اسم المضيف
            hostname = socket.gethostname()
            # الحصول على كل عناوين IP المرتبطة بالمضيف
            ip_list = socket.getaddrinfo(hostname, None)
            
            for ip in ip_list:
                if ip[0] == socket.AF_INET:  # IPv4 فقط
                    addr = ip[4][0]
                    if not addr.startswith('127.'):  # تجاهل localhost
                        if addr not in ip_addresses:
                            ip_addresses.append(addr)
                            
            # محاولة الحصول على IP الخارجي
            s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
            try:
                # لا نحتاج للاتصال فعلياً
                s.connect(('8.8.8.8', 1))
                external_ip = s.getsockname()[0]
                if external_ip not in ip_addresses:
                    ip_addresses.append(external_ip)
            except Exception:
                pass
            finally:
                s.close()
                
        except Exception as e:
            self.log_error(f"خطأ في الحصول على عناوين IP: {str(e)}")
            
        return sorted(list(set(ip_addresses)))  # إزالة التكرار وترتيب القائمة

    def get_device_ip_addresses(self, device_id):
        """الحصول على جميع عناوين IP المتاحة للجهاز عبر USB"""
        ip_addresses = []
        try:
            # الحصول على جميع الواجهات الشبكية
            result = subprocess.run(
                [Config.ADB_COMMAND, '-s', device_id, 'shell', 
                 "ip -f inet addr show | grep -v -E '^$|^    ' | cut -d' ' -f2"],
                capture_output=True,
                text=True,
                check=True
            )
            
            interfaces = result.stdout.strip().split('\n')
            
            for interface in interfaces:
                # الحصول على عنوان IP لكل واجهة
                result = subprocess.run(
                    [Config.ADB_COMMAND, '-s', device_id, 'shell', 
                     f"ip -f inet addr show {interface} | grep 'inet' | cut -d' ' -f6 | cut -d'/' -f1"],
                    capture_output=True,
                    text=True,
                    check=True
                )
                
                ip = result.stdout.strip()
                if ip and not ip.startswith('127.') and not ip.startswith('169.254'):
                    ip_addresses.append(f"{ip} ({interface})")
            
        except subprocess.CalledProcessError as e:
            self.log_error(f"خطأ في الحصول على عناوين IP: {e.stderr}")
        except Exception as e:
            self.log_error(f"خطأ: {str(e)}")
            
    def execute_command(self, command, output_file=None):
        """تنفيذ الأوامر باستخدام QProcess"""
        process = QProcess(self)
        process.start(command[0], command[1:])
        process.waitForFinished()
        output = process.readAllStandardOutput().data().decode()
        error = process.readAllStandardError().data().decode()
        if process.exitCode() != 0:
            raise Exception(error)
        if output_file:
            with open(output_file, 'wb') as file:
                file.write(process.readAllStandardOutput())
        return output

    def extract_ips(self, text):
        """استخراج عناوين IP من نص الإخراج"""
        lines = text.splitlines()
        ips = [line.split('src')[-1].strip() for line in lines if 'src' in line]
        return ips

    def refresh_ip_addresses(self):
        """تحديث قائمة عناوين IP"""
        self.wireless_settings.ip_combo.clear()
        
        selected_items = self.device_list.selectedItems()
        if not selected_items:
            self.log_error("الرجاء اختيار جهاز أولاً")
            return

        device_id = selected_items[0].text()
        if ':' in device_id:
            self.log_error("الرجاء الاتصال بالكابل أولاً")
            return
            
        try:
            # الحصول على عناوين IP من الجهاز
            result = self.execute_command([
                Config.ADB_COMMAND,
                '-s',
                device_id,
                'shell',
                'ip',
                'route'
            ])
            
            ip_addresses = self.extract_ips(result)
            
            if ip_addresses:
                self.wireless_settings.ip_combo.addItems(ip_addresses)
                self.wireless_settings.ip_combo.setCurrentIndex(0)
            else:
                self.log_error("لم يتم العثور على عناوين IP. تأكد من تفعيل الشبكة على الجهاز")
                
        except Exception as e:
            self.log_error(f"فشل في تحديث قائمة عناوين IP: {str(e)}")

    def refresh_devices(self):
        """تحديث قائمة الأجهزة المتصلة"""
        try:
            # حفظ الجهاز المحدد حالياً إن وجد
            current_device = None
            if self.device_list.selectedItems():
                current_device = self.device_list.selectedItems()[0].text()
            
            # تحديث القائمة
            devices = subprocess.check_output([Config.ADB_COMMAND, 'devices']).decode().splitlines()[1:]
            connected_devices = [dev.split('\t')[0] for dev in devices if dev.strip()]
            
            self.device_list.clear()
            self.device_list.addItems(connected_devices)
            
            # إعادة تحديد الجهاز السابق إن كان ما زال متصلاً
            if current_device:
                items = self.device_list.findItems(current_device, Qt.MatchExactly)
                if items:
                    self.device_list.setCurrentItem(items[0])
                    
        except Exception as e:
            self.log_error(f"خطأ في تحديث الأجهزة: {e}")
    
    def closeEvent(self, event):
        # إيقاف جميع عمليات scrcpy
        self.stop_scrcpy()
        
        # انتظار إنهاء جميع العمليات
        for process in self.scrcpy_processes:
            process.waitForFinished()
        
        self.save_settings()
        event.accept()
 
    def start_scrcpy(self):
        """بدء عملية scrcpy جديدة"""
        try:
            selected_items = self.device_list.selectedItems()
            if not selected_items:
                self.log_error("لم يتم اختيار جهاز")
                return
                
            device_id = selected_items[0].text()
            command = self.build_scrcpy_command(device_id)
            
            # إنشاء عملية جديدة
            process = QProcess(self)
            
            # ربط إشارات العملية
            process.finished.connect(self.on_scrcpy_finished)
            process.errorOccurred.connect(lambda error: self.log_error(f"خطأ في العملية: {error}"))
            
            # إضافة العملية للقائمة قبل بدئها
            self.scrcpy_processes.append(process)
            
            # بدء العملية
            process.start(command[0], command[1:])
            
            # تحديث حالة الأزرار
            self.update_button_states()
            
        except Exception as e:
            self.log_error(f"خطأ في بدء العملية: {str(e)}")
            # إزالة العملية من القائمة في حالة الفشل
            if process in self.scrcpy_processes:
                self.scrcpy_processes.remove(process)
            self.update_button_states()
            
    def on_scrcpy_finished(self, exit_code, exit_status):
        # إزالة العملية المنتهية من القائمة
        process = self.sender()
        if process in self.scrcpy_processes:
            self.scrcpy_processes.remove(process)
        
        # تحديث حالة الأزرار
        self.update_button_states()
        
        if exit_code != 0:
            self.log_error(f"توقفت العملية مع رمز الخروج: {exit_code}")

    def build_scrcpy_command(self, device_id):
        command = [Config.SCRCPY_COMMAND, '-s', device_id]
        
        # Add display settings
        command.extend(['--max-size', str(self.display_settings.max_size_spin.value())])
        command.extend(['--video-bit-rate', f'{self.display_settings.bitrate_spin.value()}M'])
        command.extend(['--max-fps', str(self.display_settings.fps_spin.value())])
        
        # تحديث خيارات لوحة المفاتيح والفأرة
        command.extend(['--keyboard', self.input_settings.keyboard_type.currentText()])
        command.extend(['--mouse', self.input_settings.mouse_type.currentText()])
        
        # تحديث خيار الدوران - استخدام القيمة المخزنة في userData
        orientation = self.display_settings.orientation_combo.currentData()
        if orientation != "0":
            command.extend(['--orientation', orientation])

        # Add display options
        if self.display_settings.borderless_check.isChecked():
            command.append('--window-borderless')
        if self.display_settings.fullscreen_check.isChecked():
            command.append('--fullscreen')
        if self.display_settings.always_on_top_check.isChecked():
            command.append('--always-on-top')
        if self.display_settings.show_touches_check.isChecked():
            command.append('--show-touches')
        
        # Add audio settings
        if self.audio_settings.audio_enabled.isChecked():
            command.extend(['--audio-bit-rate', 
                          f'{self.audio_settings.audio_bit_rate.value()}k'])
        
        # Add control settings
        if self.control_settings.stay_awake.isChecked():
            command.append('--stay-awake')
        if self.control_settings.turn_screen_off.isChecked():
            command.append('--turn-screen-off')
        if self.control_settings.power_off_on_close.isChecked():
            command.append('--power-off-on-close')
        
        return command
        
    def stop_scrcpy(self):
        """إيقاف جميع عمليات scrcpy"""
        try:
            # نسخة من القائمة لتجنب أخطاء التعديل أثناء التكرار
            processes_to_stop = self.scrcpy_processes.copy()
            
            for process in processes_to_stop:
                try:
                    if isinstance(process, QProcess) and process.state() == QProcess.Running:
                        process.terminate()
                        # انتظار إنهاء العملية
                        if not process.waitForFinished(3000):  # انتظار 3 ثواني
                            process.kill()  # إجبار الإنهاء إذا لم تستجب
                            process.waitForFinished(1000)  # انتظار إضافي للتأكد من الإنهاء
                except Exception as e:
                    self.log_error(f"خطأ في إيقاف العملية: {str(e)}")
                
                # إزالة العملية من القائمة إذا كانت موجودة
                if process in self.scrcpy_processes:
                    self.scrcpy_processes.remove(process)
            
            # تفريغ القائمة بالكامل للتأكد
            self.scrcpy_processes.clear()
            
        except Exception as e:
            self.log_error(f"خطأ في إيقاف العمليات: {str(e)}")
        finally:
            # تحديث حالة الأزرار في جميع الحالات
            self.update_button_states()
    
    def update_button_states(self):
        """تحديث حالة الأزرار بناءً على حالة العمليات"""
        has_running_process = any(p.state() == QProcess.Running for p in self.scrcpy_processes)
        
        # تحديث حالة الأزرار
        self.start_button.setEnabled(not has_running_process)
        self.stop_button.setEnabled(has_running_process)

    def toggle_connection(self):
        selected_items = self.device_list.selectedItems()
        if not selected_items:
            self.log_error("لم يتم اختيار جهاز")
            return
            
        device_id = selected_items[0].text()
        if ':' in device_id:  # Wireless connection
            self.connect_wired(device_id)
        else:  # Wired connection
            self.connect_wireless(device_id)
            
    def connect_wireless(self):
        """الاتصال لاسلكياً بالجهاز"""
        selected_items = self.device_list.selectedItems()
        if not selected_items:
            self.log_error("لم يتم اختيار جهاز")
            return

        device_id = selected_items[0].text()
        if ':' in device_id:
            self.log_error("الجهاز متصل لاسلكياً بالفعل")
            return
            
        selected_ip = self.wireless_settings.ip_combo.currentText()
        
        if not selected_ip:
            self.log_error("لم يتم اختيار عنوان IP")
            return
            
        try:
            # تفعيل وضع TCP/IP
            self.execute_command([
                Config.ADB_COMMAND,
                '-s',
                device_id,
                'tcpip',
                '5555'
            ])
            
            # انتظار لحظة للتأكد من تفعيل الوضع
            QThread.sleep(3)
            
            # الاتصال بالجهاز
            result = self.execute_command([
                Config.ADB_COMMAND,
                'connect',
                f"{selected_ip}:5555"
            ])
            
            if "connected" in result.lower():
                self.log_error("تم الاتصال بنجاح")
                QThread.sleep(1)
                self.refresh_devices()
            else:
                self.log_error(f"نتيجة الاتصال: {result}")
            
        except Exception as e:
            self.log_error(f"خطأ في الاتصال: {str(e)}")

    def disconnect_wireless(self):
        """قطع الاتصال اللاسلكي"""
        selected_items = self.device_list.selectedItems()
        if not selected_items:
            self.log_error("لم يتم اختيار جهاز")
            return

        device_id = selected_items[0].text()
        
        try:
            if ':' not in device_id:
                self.log_error("الجهاز غير متصل لاسلكياً")
                return
                
            result = self.execute_command([
                Config.ADB_COMMAND,
                'disconnect',
                device_id
            ])
            
            self.log_error("تم قطع الاتصال اللاسلكي")
            self.refresh_devices()
            
        except Exception as e:
            self.log_error(f"خطأ في قطع الاتصال: {str(e)}")

    def connect_wired(self, device_id):
        try:
            subprocess.run([Config.ADB_COMMAND, 'usb'])
        except Exception as e:
            self.log_error(str(e))
            
    def update_device_list(self, devices):
        self.device_list.clear()
        self.device_list.addItems(devices)
        
    def log_error(self, message):
        self.error_log.append(f"[{time.strftime('%Y-%m-%d %H:%M:%S')}] {message}")
        
    def load_settings(self):
        # Window settings
        pos = self.settings.value('pos', QPoint(*Config.DEFAULT_WINDOW_POS))
        size = self.settings.value('size', QSize(*Config.DEFAULT_WINDOW_SIZE))
        self.move(pos)
        self.resize(size)
        
        # Display settings
        self.display_settings.max_size_spin.setValue(
            int(self.settings.value('max_size', Config.DEFAULT_MAX_SIZE)))
        self.display_settings.fps_spin.setValue(
            int(self.settings.value('fps', Config.DEFAULT_FPS)))
        self.display_settings.bitrate_spin.setValue(
            int(self.settings.value('bitrate', Config.DEFAULT_BITRATE)))
        # تحميل إعدادات الإدخال
        self.input_settings.keyboard_type.setCurrentText(
            self.settings.value('keyboard_type', Config.KEYBOARD_TYPES[0]))
        self.input_settings.mouse_type.setCurrentText(
            self.settings.value('mouse_type', Config.MOUSE_TYPES[0]))
            
        # تحميل إعدادات العرض
        self.display_settings.borderless_check.setChecked(
            self.settings.value('borderless', False, type=bool))
        self.display_settings.fullscreen_check.setChecked(
            self.settings.value('fullscreen', False, type=bool))
        self.display_settings.always_on_top_check.setChecked(
            self.settings.value('always_on_top', False, type=bool))
        self.display_settings.show_touches_check.setChecked(
            self.settings.value('show_touches', False, type=bool))
       
        saved_orientation = self.settings.value('orientation', '0')
        index = self.display_settings.orientation_combo.findData(saved_orientation)
        if index >= 0:
            self.display_settings.orientation_combo.setCurrentIndex(index)

        last_ip = self.settings.value('last_ip', '')
        if last_ip:
            index = self.wireless_settings.ip_combo.findText(last_ip)
            if index >= 0:
                self.wireless_settings.ip_combo.setCurrentIndex(index)

        # تحميل إعدادات الصوت
        self.audio_settings.audio_enabled.setChecked(
            self.settings.value('audio_enabled', False, type=bool))
        self.audio_settings.audio_bit_rate.setValue(
            int(self.settings.value('audio_bit_rate', Config.DEFAULT_AUDIO_BITRATE)))
            
        # تحميل إعدادات التحكم
        self.control_settings.stay_awake.setChecked(
            self.settings.value('stay_awake', False, type=bool))
        self.control_settings.turn_screen_off.setChecked(
            self.settings.value('turn_screen_off', False, type=bool))
        self.control_settings.power_off_on_close.setChecked(
            self.settings.value('power_off_on_close', False, type=bool))

    def save_settings(self):
        # Window settings
        self.settings.setValue('pos', self.pos())
        self.settings.setValue('size', self.size())
        
        # Display settings
        self.settings.setValue('max_size', self.display_settings.max_size_spin.value())
        self.settings.setValue('fps', self.display_settings.fps_spin.value())
        self.settings.setValue('bitrate', self.display_settings.bitrate_spin.value())
        
        # حفظ إعدادات الإدخال
        self.settings.setValue('keyboard_type', self.input_settings.keyboard_type.currentText())
        self.settings.setValue('mouse_type', self.input_settings.mouse_type.currentText())
        
        # حفظ إعدادات العرض
        self.settings.setValue('borderless', self.display_settings.borderless_check.isChecked())
        self.settings.setValue('fullscreen', self.display_settings.fullscreen_check.isChecked())
        self.settings.setValue('always_on_top', self.display_settings.always_on_top_check.isChecked())
        self.settings.setValue('show_touches', self.display_settings.show_touches_check.isChecked())
        self.settings.setValue('orientation', self.display_settings.orientation_combo.currentData())        
        
        # حفظ إعدادات الصوت
        self.settings.setValue('audio_enabled', self.audio_settings.audio_enabled.isChecked())
        self.settings.setValue('audio_bit_rate', self.audio_settings.audio_bit_rate.value())
        
        # حفظ إعدادات التحكم
        self.settings.setValue('stay_awake', self.control_settings.stay_awake.isChecked())
        self.settings.setValue('turn_screen_off', self.control_settings.turn_screen_off.isChecked())
        self.settings.setValue('power_off_on_close', self.control_settings.power_off_on_close.isChecked())

        self.settings.setValue('last_ip', self.wireless_settings.ip_combo.currentText())

if __name__ == '__main__':
    app = QApplication(sys.argv)
    manager = ScrcpyManager()
    manager.show()
    sys.exit(app.exec_())